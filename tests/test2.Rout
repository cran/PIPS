
R version 2.12.1 (2010-12-16)
Copyright (C) 2010 The R Foundation for Statistical Computing
ISBN 3-900051-07-0
Platform: sparc-sun-solaris2.10/sparcv9 (32-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ######################################################################
> ## File: test2.R 
> ## Author: Ray Griner
> ## Date: November 11, 2011 (111111!)
> ## Desc: Short examples of predicted interval plots (PIPs)
> ######################################################################
> 
> source('/home/public/R/PIPs.R', echo=TRUE)

> files <- list.files(path = "/home/public/R/PIPS/", 
+     pattern = "\\.R$", full.names = TRUE)

> for (nm in files) source(nm)
> 
> set.seed(12345)
> 
> #######################################################
> # EXAMPLE 2: ONE SAMPLE, BINARY OUTCOME
> #######################################################
> myY<-c(rep(1,times=20),rep(0,times=80),rep(1,times=25),rep(0,times=25))
> myGroup<-c(rep('A',100),rep('B',50))
> 
> pips <- pred.int(y=myY, N=400, data.type="binary", iters=100, print.run.time=FALSE)
> 
> png("test2.png")
> plot(pips)
> print(pips, pi.count=100)
Sample sizes:
  Observed Simulated Total
       150       250   400

Point estimates and 95% confidence intervals from observed data:
  Point Lower Bound Upper Bound
    0.3      0.2324      0.3776

Point estimates and 95% predicted intervals from observed+simulated data:
     Point Lower Bound Upper Bound
1   0.2600      0.2194      0.3051
2   0.2650      0.2241      0.3103
3   0.2650      0.2241      0.3103
4   0.2675      0.2265      0.3129
5   0.2700      0.2288      0.3155
6   0.2750      0.2335      0.3207
7   0.2775      0.2359      0.3233
8   0.2775      0.2359      0.3233
9   0.2775      0.2359      0.3233
10  0.2800      0.2383      0.3259
11  0.2800      0.2383      0.3259
12  0.2800      0.2383      0.3259
13  0.2800      0.2383      0.3259
14  0.2825      0.2406      0.3285
15  0.2825      0.2406      0.3285
16  0.2825      0.2406      0.3285
17  0.2825      0.2406      0.3285
18  0.2850      0.2430      0.3311
19  0.2850      0.2430      0.3311
20  0.2850      0.2430      0.3311
21  0.2850      0.2430      0.3311
22  0.2875      0.2453      0.3337
23  0.2875      0.2453      0.3337
24  0.2900      0.2477      0.3363
25  0.2900      0.2477      0.3363
26  0.2900      0.2477      0.3363
27  0.2900      0.2477      0.3363
28  0.2925      0.2501      0.3389
29  0.2925      0.2501      0.3389
30  0.2925      0.2501      0.3389
31  0.2925      0.2501      0.3389
32  0.2925      0.2501      0.3389
33  0.2925      0.2501      0.3389
34  0.2925      0.2501      0.3389
35  0.2925      0.2501      0.3389
36  0.2950      0.2524      0.3415
37  0.2950      0.2524      0.3415
38  0.2950      0.2524      0.3415
39  0.2950      0.2524      0.3415
40  0.2975      0.2548      0.3441
41  0.2975      0.2548      0.3441
42  0.2975      0.2548      0.3441
43  0.3000      0.2572      0.3466
44  0.3000      0.2572      0.3466
45  0.3000      0.2572      0.3466
46  0.3000      0.2572      0.3466
47  0.3000      0.2572      0.3466
48  0.3000      0.2572      0.3466
49  0.3000      0.2572      0.3466
50  0.3000      0.2572      0.3466
51  0.3025      0.2595      0.3492
52  0.3025      0.2595      0.3492
53  0.3025      0.2595      0.3492
54  0.3025      0.2595      0.3492
55  0.3025      0.2595      0.3492
56  0.3050      0.2619      0.3518
57  0.3050      0.2619      0.3518
58  0.3050      0.2619      0.3518
59  0.3050      0.2619      0.3518
60  0.3050      0.2619      0.3518
61  0.3050      0.2619      0.3518
62  0.3075      0.2643      0.3544
63  0.3075      0.2643      0.3544
64  0.3075      0.2643      0.3544
65  0.3075      0.2643      0.3544
66  0.3075      0.2643      0.3544
67  0.3100      0.2667      0.3570
68  0.3100      0.2667      0.3570
69  0.3100      0.2667      0.3570
70  0.3100      0.2667      0.3570
71  0.3100      0.2667      0.3570
72  0.3100      0.2667      0.3570
73  0.3125      0.2690      0.3595
74  0.3125      0.2690      0.3595
75  0.3125      0.2690      0.3595
76  0.3125      0.2690      0.3595
77  0.3150      0.2714      0.3621
78  0.3150      0.2714      0.3621
79  0.3175      0.2738      0.3647
80  0.3175      0.2738      0.3647
81  0.3175      0.2738      0.3647
82  0.3175      0.2738      0.3647
83  0.3175      0.2738      0.3647
84  0.3200      0.2762      0.3672
85  0.3200      0.2762      0.3672
86  0.3225      0.2786      0.3698
87  0.3225      0.2786      0.3698
88  0.3250      0.2810      0.3724
89  0.3300      0.2857      0.3775
90  0.3325      0.2881      0.3801
91  0.3325      0.2881      0.3801
92  0.3325      0.2881      0.3801
93  0.3325      0.2881      0.3801
94  0.3325      0.2881      0.3801
95  0.3350      0.2905      0.3826
96  0.3350      0.2905      0.3826
97  0.3375      0.2929      0.3852
98  0.3400      0.2953      0.3877
99  0.3500      0.3049      0.3980
100 0.3525      0.3073      0.4005

> dev.off()            # Save and write graph when done
null device 
          1 
> 
> 
> proc.time()
   user  system elapsed 
  1.728   0.211   2.150 
